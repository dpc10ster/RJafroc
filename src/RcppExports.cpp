// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BMNLLInner
double BMNLLInner(double a, double b, NumericVector zetas, NumericVector fi, NumericVector ti);
RcppExport SEXP _RJafroc_BMNLLInner(SEXP aSEXP, SEXP bSEXP, SEXP zetasSEXP, SEXP fiSEXP, SEXP tiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zetas(zetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ti(tiSEXP);
    rcpp_result_gen = Rcpp::wrap(BMNLLInner(a, b, zetas, fi, ti));
    return rcpp_result_gen;
END_RCPP
}
// Qz
double Qz(double zeta1, double zeta2);
RcppExport SEXP _RJafroc_Qz(SEXP zeta1SEXP, SEXP zeta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta1(zeta1SEXP);
    Rcpp::traits::input_parameter< double >::type zeta2(zeta2SEXP);
    rcpp_result_gen = Rcpp::wrap(Qz(zeta1, zeta2));
    return rcpp_result_gen;
END_RCPP
}
// Pz
double Pz(double mu, double alpha, double zeta1, double zeta2);
RcppExport SEXP _RJafroc_Pz(SEXP muSEXP, SEXP alphaSEXP, SEXP zeta1SEXP, SEXP zeta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type zeta1(zeta1SEXP);
    Rcpp::traits::input_parameter< double >::type zeta2(zeta2SEXP);
    rcpp_result_gen = Rcpp::wrap(Pz(mu, alpha, zeta1, zeta2));
    return rcpp_result_gen;
END_RCPP
}
// CBMNLLInner
double CBMNLLInner(double mu, double alpha, NumericVector zetas, NumericVector fi, NumericVector ti);
RcppExport SEXP _RJafroc_CBMNLLInner(SEXP muSEXP, SEXP alphaSEXP, SEXP zetasSEXP, SEXP fiSEXP, SEXP tiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zetas(zetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ti(tiSEXP);
    rcpp_result_gen = Rcpp::wrap(CBMNLLInner(mu, alpha, zetas, fi, ti));
    return rcpp_result_gen;
END_RCPP
}
// HrSp
double HrSp(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_HrSp(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(HrSp(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// ExpTrnsfmSp
double ExpTrnsfmSp(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_ExpTrnsfmSp(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpTrnsfmSp(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// MaxNLF
double MaxNLF(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_MaxNLF(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxNLF(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// MaxLLF
double MaxLLF(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_MaxLLF(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxLLF(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// TrapezoidalArea
double TrapezoidalArea(NumericVector noise, int n_noise, NumericVector signal, int n_signal);
RcppExport SEXP _RJafroc_TrapezoidalArea(SEXP noiseSEXP, SEXP n_noiseSEXP, SEXP signalSEXP, SEXP n_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< int >::type n_noise(n_noiseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< int >::type n_signal(n_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(TrapezoidalArea(noise, n_noise, signal, n_signal));
    return rcpp_result_gen;
END_RCPP
}
// HrAuc
double HrAuc(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_HrAuc(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(HrAuc(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// HrSe
double HrSe(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_HrSe(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(HrSe(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// AFROC1
double AFROC1(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_AFROC1(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(AFROC1(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// AFROC
double AFROC(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_AFROC(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(AFROC(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// wAFROC1
double wAFROC1(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll, NumericMatrix weights);
RcppExport SEXP _RJafroc_wAFROC1(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(wAFROC1(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll, weights));
    return rcpp_result_gen;
END_RCPP
}
// wAFROC
double wAFROC(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll, NumericMatrix weights);
RcppExport SEXP _RJafroc_wAFROC(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(wAFROC(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll, weights));
    return rcpp_result_gen;
END_RCPP
}
// MaxNLFAllCases
double MaxNLFAllCases(NumericMatrix nl, NumericMatrix ll, NumericVector n_lesions_per_image, NumericVector max_cases, int max_nl, int max_ll);
RcppExport SEXP _RJafroc_MaxNLFAllCases(SEXP nlSEXP, SEXP llSEXP, SEXP n_lesions_per_imageSEXP, SEXP max_casesSEXP, SEXP max_nlSEXP, SEXP max_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_lesions_per_image(n_lesions_per_imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_cases(max_casesSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxNLFAllCases(nl, ll, n_lesions_per_image, max_cases, max_nl, max_ll));
    return rcpp_result_gen;
END_RCPP
}
// ROI
double ROI(int ncases_nor, int ncases_abn, int max_nl, NumericVector n_les, NumericMatrix nl, NumericMatrix ll);
RcppExport SEXP _RJafroc_ROI(SEXP ncases_norSEXP, SEXP ncases_abnSEXP, SEXP max_nlSEXP, SEXP n_lesSEXP, SEXP nlSEXP, SEXP llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ncases_nor(ncases_norSEXP);
    Rcpp::traits::input_parameter< int >::type ncases_abn(ncases_abnSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_les(n_lesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    rcpp_result_gen = Rcpp::wrap(ROI(ncases_nor, ncases_abn, max_nl, n_les, nl, ll));
    return rcpp_result_gen;
END_RCPP
}
// SongA1
double SongA1(int ncases_nor, int ncases_abn, int max_nl, int max_ll, NumericVector n_les, NumericMatrix nl, NumericMatrix ll);
RcppExport SEXP _RJafroc_SongA1(SEXP ncases_norSEXP, SEXP ncases_abnSEXP, SEXP max_nlSEXP, SEXP max_llSEXP, SEXP n_lesSEXP, SEXP nlSEXP, SEXP llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ncases_nor(ncases_norSEXP);
    Rcpp::traits::input_parameter< int >::type ncases_abn(ncases_abnSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_les(n_lesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    rcpp_result_gen = Rcpp::wrap(SongA1(ncases_nor, ncases_abn, max_nl, max_ll, n_les, nl, ll));
    return rcpp_result_gen;
END_RCPP
}
// SongA2
double SongA2(int ncases_nor, int ncases_abn, int max_nl, int max_ll, NumericVector n_les, NumericMatrix nl, NumericMatrix ll);
RcppExport SEXP _RJafroc_SongA2(SEXP ncases_norSEXP, SEXP ncases_abnSEXP, SEXP max_nlSEXP, SEXP max_llSEXP, SEXP n_lesSEXP, SEXP nlSEXP, SEXP llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ncases_nor(ncases_norSEXP);
    Rcpp::traits::input_parameter< int >::type ncases_abn(ncases_abnSEXP);
    Rcpp::traits::input_parameter< int >::type max_nl(max_nlSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll(max_llSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_les(n_lesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ll(llSEXP);
    rcpp_result_gen = Rcpp::wrap(SongA2(ncases_nor, ncases_abn, max_nl, max_ll, n_les, nl, ll));
    return rcpp_result_gen;
END_RCPP
}
// erfcpp
double erfcpp(double x);
RcppExport SEXP _RJafroc_erfcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(erfcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// erfVect
NumericVector erfVect(NumericVector x);
RcppExport SEXP _RJafroc_erfVect(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(erfVect(x));
    return rcpp_result_gen;
END_RCPP
}
// xROC
double xROC(double zeta, double lambda);
RcppExport SEXP _RJafroc_xROC(SEXP zetaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(xROC(zeta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// xROCVect
NumericVector xROCVect(NumericVector zeta, double lambda);
RcppExport SEXP _RJafroc_xROCVect(SEXP zetaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(xROCVect(zeta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// yROC
double yROC(double zeta, double mu, double lambda, double nu, NumericVector lesDistr);
RcppExport SEXP _RJafroc_yROC(SEXP zetaSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP lesDistrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lesDistr(lesDistrSEXP);
    rcpp_result_gen = Rcpp::wrap(yROC(zeta, mu, lambda, nu, lesDistr));
    return rcpp_result_gen;
END_RCPP
}
// yROCVect
NumericVector yROCVect(NumericVector zeta, double mu, double lambda, double nu, NumericVector lesDistr);
RcppExport SEXP _RJafroc_yROCVect(SEXP zetaSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP lesDistrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lesDistr(lesDistrSEXP);
    rcpp_result_gen = Rcpp::wrap(yROCVect(zeta, mu, lambda, nu, lesDistr));
    return rcpp_result_gen;
END_RCPP
}
// RsmInner
double RsmInner(double mu, double lambda, double nu, NumericVector lesDistr, NumericVector zeta, NumericVector fb, NumericVector tb);
RcppExport SEXP _RJafroc_RsmInner(SEXP muSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP lesDistrSEXP, SEXP zetaSEXP, SEXP fbSEXP, SEXP tbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lesDistr(lesDistrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fb(fbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tb(tbSEXP);
    rcpp_result_gen = Rcpp::wrap(RsmInner(mu, lambda, nu, lesDistr, zeta, fb, tb));
    return rcpp_result_gen;
END_RCPP
}
// y_ROC_FPF
NumericVector y_ROC_FPF(NumericVector FPF, double mu, double lambda, double nu, NumericVector lesDistr);
RcppExport SEXP _RJafroc_y_ROC_FPF(SEXP FPFSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP lesDistrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type FPF(FPFSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lesDistr(lesDistrSEXP);
    rcpp_result_gen = Rcpp::wrap(y_ROC_FPF(FPF, mu, lambda, nu, lesDistr));
    return rcpp_result_gen;
END_RCPP
}
// ywAFROC
double ywAFROC(double zeta, double mu, double nu, NumericVector lesDistr, NumericMatrix lesWghtDistr);
RcppExport SEXP _RJafroc_ywAFROC(SEXP zetaSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lesDistrSEXP, SEXP lesWghtDistrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lesDistr(lesDistrSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lesWghtDistr(lesWghtDistrSEXP);
    rcpp_result_gen = Rcpp::wrap(ywAFROC(zeta, mu, nu, lesDistr, lesWghtDistr));
    return rcpp_result_gen;
END_RCPP
}
// ForwardValue
double ForwardValue(double value, double valueLower, double valueUpper);
RcppExport SEXP _RJafroc_ForwardValue(SEXP valueSEXP, SEXP valueLowerSEXP, SEXP valueUpperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< double >::type valueLower(valueLowerSEXP);
    Rcpp::traits::input_parameter< double >::type valueUpper(valueUpperSEXP);
    rcpp_result_gen = Rcpp::wrap(ForwardValue(value, valueLower, valueUpper));
    return rcpp_result_gen;
END_RCPP
}
// InverseValue
double InverseValue(double valueFwd, double valueLower, double valueUpper);
RcppExport SEXP _RJafroc_InverseValue(SEXP valueFwdSEXP, SEXP valueLowerSEXP, SEXP valueUpperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type valueFwd(valueFwdSEXP);
    Rcpp::traits::input_parameter< double >::type valueLower(valueLowerSEXP);
    Rcpp::traits::input_parameter< double >::type valueUpper(valueUpperSEXP);
    rcpp_result_gen = Rcpp::wrap(InverseValue(valueFwd, valueLower, valueUpper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RJafroc_BMNLLInner", (DL_FUNC) &_RJafroc_BMNLLInner, 5},
    {"_RJafroc_Qz", (DL_FUNC) &_RJafroc_Qz, 2},
    {"_RJafroc_Pz", (DL_FUNC) &_RJafroc_Pz, 4},
    {"_RJafroc_CBMNLLInner", (DL_FUNC) &_RJafroc_CBMNLLInner, 5},
    {"_RJafroc_HrSp", (DL_FUNC) &_RJafroc_HrSp, 6},
    {"_RJafroc_ExpTrnsfmSp", (DL_FUNC) &_RJafroc_ExpTrnsfmSp, 6},
    {"_RJafroc_MaxNLF", (DL_FUNC) &_RJafroc_MaxNLF, 6},
    {"_RJafroc_MaxLLF", (DL_FUNC) &_RJafroc_MaxLLF, 6},
    {"_RJafroc_TrapezoidalArea", (DL_FUNC) &_RJafroc_TrapezoidalArea, 4},
    {"_RJafroc_HrAuc", (DL_FUNC) &_RJafroc_HrAuc, 6},
    {"_RJafroc_HrSe", (DL_FUNC) &_RJafroc_HrSe, 6},
    {"_RJafroc_AFROC1", (DL_FUNC) &_RJafroc_AFROC1, 6},
    {"_RJafroc_AFROC", (DL_FUNC) &_RJafroc_AFROC, 6},
    {"_RJafroc_wAFROC1", (DL_FUNC) &_RJafroc_wAFROC1, 7},
    {"_RJafroc_wAFROC", (DL_FUNC) &_RJafroc_wAFROC, 7},
    {"_RJafroc_MaxNLFAllCases", (DL_FUNC) &_RJafroc_MaxNLFAllCases, 6},
    {"_RJafroc_ROI", (DL_FUNC) &_RJafroc_ROI, 6},
    {"_RJafroc_SongA1", (DL_FUNC) &_RJafroc_SongA1, 7},
    {"_RJafroc_SongA2", (DL_FUNC) &_RJafroc_SongA2, 7},
    {"_RJafroc_erfcpp", (DL_FUNC) &_RJafroc_erfcpp, 1},
    {"_RJafroc_erfVect", (DL_FUNC) &_RJafroc_erfVect, 1},
    {"_RJafroc_xROC", (DL_FUNC) &_RJafroc_xROC, 2},
    {"_RJafroc_xROCVect", (DL_FUNC) &_RJafroc_xROCVect, 2},
    {"_RJafroc_yROC", (DL_FUNC) &_RJafroc_yROC, 5},
    {"_RJafroc_yROCVect", (DL_FUNC) &_RJafroc_yROCVect, 5},
    {"_RJafroc_RsmInner", (DL_FUNC) &_RJafroc_RsmInner, 7},
    {"_RJafroc_y_ROC_FPF", (DL_FUNC) &_RJafroc_y_ROC_FPF, 5},
    {"_RJafroc_ywAFROC", (DL_FUNC) &_RJafroc_ywAFROC, 5},
    {"_RJafroc_ForwardValue", (DL_FUNC) &_RJafroc_ForwardValue, 3},
    {"_RJafroc_InverseValue", (DL_FUNC) &_RJafroc_InverseValue, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RJafroc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
